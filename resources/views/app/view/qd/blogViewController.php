/*
 * File: app/view/liebiaoViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.qd.blogViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.mypanel',
    onGridPanelAfterrender: function (view, eOpts) {
        var me = this;
        var myStore = Ext.create('Ext.data.Store',
            {
                fields: [
                    {name: 'id', type: 'string'},
                    {name: 'post_title', type: 'string'},
                    {name: 'created_at', type: 'string'},
                    {name: 'sort_name', type: 'string'},
                    {name: 'post_content', type: 'string'},
                    {name: 'post_author', type: 'string'},
                    {name: 'post_column', type: 'string'},
                ],
                proxy: {
                    type: 'ajax',
                    url: 'admin/post-list',
                    reader: {
                        type: 'json',
                        rootProperty: 'data'
                    }
                },
                autoLoad: true
            }
        );
        view.setStore(myStore);
        me.lookupReference('blog_pagingtoolbar').setStore(myStore);
    },
    OnaddBtnClick: function (btn, e, eOpts) {
        var me = this;
        Ext.create('MyApp.view.qd.edit',
            {
                listeners: {
                    beforeclose: {
                        fn: function (win, eOpts) {
                            var grid = me.lookupReference('gridpanel');
                            grid.store.load();
                        }
                    }
                }
            }).show();
    },
    OneditBtnClick: function (btn, e, eOpts) {
        var me = this;
        var grid = me.lookupReference('gridpanel');
        var sel = grid.getSelectionModel().getSelection();
        var length = sel.length;
        if (length == 1) {
            Ext.create('MyApp.view.qd.edit',
                {
                    edit: true,
                    record: sel[0],
                    listeners: {
                        beforeclose: {
                            fn: function (win, eOpts) {
                                var grid = me.lookupReference('gridpanel');
                                grid.store.load();
                            }
                        }
                    }
                }).show();
        } else {

        }
    },
    OndelBtnClick: function (btn, e, eOpts) {

    },
    onGridPanelItemdblclick: function () {
        var me = this;
        var grid = me.lookupReference('gridpanel');
        var sel = grid.getSelectionModel().getSelection();
        var length = sel.length;
        if (length == 1) {
            Ext.create('MyApp.view.qd.edit',
                {
                    edit: true,
                    record: sel[0],
                    listeners: {
                        beforeclose: {
                            fn: function (win, eOpts) {
                                var grid = me.lookupReference('gridpanel');
                                grid.store.load();
                            }
                        }
                    }
                }).show();
        } else {

        }
    },
    OneditWinShow: function (win, eOpts) {
        var me = this;
        var sort_store = Ext.create('Ext.data.Store',
            {
                fields: ['id', 'name'],
                proxy: {
                    url: 'callApi/Sort/get_sort_combobox',
                    type: 'ajax',
                    reader: {
                        type: 'json',
                        rootProperty: 'data'
                    }
                },
                autoLoad: true
            }
        );
        me.lookupReference('sort_id').setStore(sort_store);
        if (win.edit) {
            win.down('form').items.each(
                function (item, index, length) {
                    if (item.xtype == 'ueditor') {
                        var value = win.record.get('post_content');
                        setTimeout(function () {
                            item.setValue(value);
                        }, 200);
                    }
                    if (typeof(item.getName) == 'function') {
                        if (item.getName() != '_token') {
                            item.setValue(win.record.get(item.getName()));
                        }
                    }
                });
        }
    }
});
